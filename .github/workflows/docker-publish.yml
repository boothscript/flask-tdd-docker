name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: flask-tdd-docker

jobs:

  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Pull previously published image
        run: docker pull docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME || true
      - name: Build and tag new image
        run: |
          docker build --cache-from docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME:latest --tag $IMAGE_NAME --file ./Dockerfile.prod .
          docker push docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME:latest 



  test:
    needs: build
    runs-on: ubuntu-latest


    strategy:
      matrix:
        python-version: [3.8]





    steps:
      - uses: actions/checkout@v2

      - name: Log into registry and pull latest image
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
        docker pull docker.pkg.github.com/${{ github.repository }}/flask-tdd-docker:latest

      - name: Run tests
        env:
          POSTGRES_DB: users
          POSTGRES_USER: runner
          POSTGRES_PASSWORD: runner
          DATABASE_TEST_URL: postgres://runner:runner@postgres:5432/users
        run: |
          docker-compose up -d
          docker-compose exec users pip install --upgrade pip
          docker-compose exec users pip install -r requirements.txt
          docker-compose exec users pip install black flake8 isort pytest
          docker-compose exec users pytest "project/tests" -p no:warnings
          docker-compose exec users flake8 project
          docker-compose exec users black project --check
          docker-compose exec users isort project/**/*.py --check-only
          
        
       
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile.prod --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  deploy:
    needs: [test, push]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Deploy to heroku
        env:
          HEROKU_APP_NAME: tranquil-virgin-islands-52966 
          HEROKU_REGISTRY_IMAGE: registry.heroku.com/tranquil-virgin-islands-52966/web
          HEROKU_API_KEY: ${{secrets.HEROKU_API_KEY}}
        run: |
          chmod +x ./release.sh
          docker build --tag ${HEROKU_REGISTRY_IMAGE} --file ./Dockerfile.prod "."
          docker login -u _ -p ${{secrets.HEROKU_API_KEY}} registry.heroku.com
          docker push ${HEROKU_REGISTRY_IMAGE}
          ./release.sh
      

    
